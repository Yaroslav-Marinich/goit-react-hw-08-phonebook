{"version":3,"file":"static/js/793.66542114.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { createContact } from '../../redux/contacts/contactsOperations';\nimport toast from 'react-hot-toast';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { selectContacts } from '../../redux/selectors';\nimport './styles.css'\n\nconst ContactValidation = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('Required!'),\n  number: Yup.string()\n    .matches(\n      /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required!'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <div className=\"phonebookContainer\">\n      <h1 className=\"phonebookTitle\">Phonebook</h1>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={ContactValidation}\n        onSubmit={(values, actions) => {\n          if (contacts.find(contact => contact.name === values.name)) {\n            toast.error(`${values.name} is already in contacts.`);\n            return;\n          }\n          dispatch(createContact(values, values.name));\n          actions.resetForm();\n        }}\n      >\n        <Form action=\"\" className=\"phonebookForm\">\n          <label htmlFor=\"\" className=\"phonebookLabel\">\n            Name\n            <Field\n              name=\"name\"\n              placeholder=\"Jane Doe\"\n              className=\"phonebookInput\"\n            />\n            <ErrorMessage\n              name=\"name\"\n              component=\"span\"\n              className=\"phonebookError\"\n            />\n          </label>\n          <label htmlFor=\"\" className=\"phonebookLabel\">\n            Number\n            <Field\n              name=\"number\"\n              placeholder=\"000-00-00\"\n              className=\"phonebookInput\"\n            />\n            <ErrorMessage\n              name=\"number\"\n              component=\"span\"\n              className=\"phonebookError\"\n            />\n          </label>\n          <button type=\"submit\" className=\"phonebookBtn\">\n            Add contact\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import { deleteContact } from '../../redux/contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FiTrash2 } from 'react-icons/fi';\nimport './styles.css';\n\nexport const Contact = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"contactCompContainer\">\n      <p className=\"contactCompText\">\n        {name} : {number}\n      </p>\n      <button onClick={() => dispatch(deleteContact(id))} className='contactCompBtn'>\n        <FiTrash2/>\n      </button>\n    </div>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { Contact } from 'components/Contact/Contact';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContactsToShow,\n  selectError,\n  selectIsLoading,\n} from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { getContacts } from 'redux/contacts/contactsOperations';\nimport Loader from 'components/Loader/Loader';\nimport './styles.css'\n\nexport const ContactsList = () => {\n  const contactsToShow = useSelector(selectContactsToShow);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <div className='contactsContainer'>\n      <h2 className='contactsTitle'>Contacts</h2>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul className='contactsList'>\n          {contactsToShow.map(contact => (\n            <li key={contact.id} className='contactsItem'>\n              <Contact contact={contact} />\n            </li>\n          ))}\n        </ul>\n      )}\n      {!contactsToShow?.length && !error && !isLoading && (\n        <div className='noContactsText'>There are no contacts in your Phonebook.</div>\n      )}\n\n      {error && <div>{error}</div>}\n    </div>\n  );\n};\n","import { findContact } from '../../redux/filter/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/selectors';\nimport './styles.css'\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const name = e => {\n    dispatch(findContact(e.currentTarget.value.toLowerCase()));\n  };\n\n  return (\n    <div className='filterContainer'>\n      <label className='filterLabel'>\n        Find contact by name\n        <input type=\"text\" className='filterInput' name=\"filter\" value={filter} onChange={name} />\n      </label>\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactsOperations';\nimport { selectIsLoading } from 'redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <title>Your PhoneBook</title>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactValidation","Yup","shape","name","matches","required","number","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","className","initialValues","validationSchema","onSubmit","values","actions","find","contact","toast","createContact","resetForm","action","htmlFor","placeholder","component","type","Contact","id","onClick","deleteContact","ContactsList","contactsToShow","selectContactsToShow","isLoading","selectIsLoading","error","selectError","useEffect","getContacts","Loader","map","length","Filter","filter","selectFilter","value","onChange","e","findContact","currentTarget","toLowerCase"],"sourceRoot":""}